name: ConnectKit CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  analyze-and-test:
    name: Analyze and Test
    runs-on: ubuntu-latest

    steps:
      # Checkout your repository
      - name: Checkout source
        uses: actions/checkout@v4

      # Setup Flutter SDK (uses subosito/flutter-action)
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          # Use the cached version of Flutter dependencies for speed
          cache: true

      - name: Get dependencies & Generate code (build_runner, Pigeon, ...)
        run: ./script/generate_code.sh  # ← ADD THIS

      - name: Check formatting
        run: dart format --set-exit-if-changed .

      # Run static analysis (lint)
      - name: Run static analysis
        run: flutter analyze --fatal-warnings

      # Run unit tests with coverage
      - name: Run tests with coverage
        run: flutter test --coverage

      # Install coverage dependence
      - name: Install lcov
        run: sudo apt-get update && sudo apt-get install -y lcov

      # Process coverage file to exclude generated files
      - name: Process coverage file to exclude generated files
        run: |
          lcov \
            --remove coverage/lcov.info \
            'lib/**.g.dart' \
            'lib/**.pigeon.dart' \
            'test/**' \
            --ignore-errors unused,unused \
            -o coverage/lcov.cleaned.info >/dev/null 2>&1

      - name: Check coverage threshold
        run: |
          # Extract coverage percentage
          COVERAGE_PERCENT=$(lcov --summary coverage/lcov.cleaned.info | grep "lines.......:" | grep -o '[0-9]\+\.[0-9]\+%' | tr -d '%')

          # Add empty line for better readability
          echo

          # Check if coverage meets threshold (90%)
          THRESHOLD=90
          if (( $(echo "$COVERAGE_PERCENT >= $THRESHOLD" | bc -l) )); then
            # Green checkmark and text
            echo -e "\033[32m✅ Coverage is ${COVERAGE_PERCENT}% (meets ${THRESHOLD}% threshold)\033[0m"
          else
            # Red X and text
            echo -e "\033[31m❌ Coverage is ${COVERAGE_PERCENT}% (below ${THRESHOLD}% threshold)\033[0m"
            echo "::error::Coverage is below ${THRESHOLD}%. Please add more tests to improve coverage."
            exit 1
          fi

      # TODO: I will enable later once my ci is passing
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v4
      #   with:
      #     file: ./coverage/lcov.cleaned.info
      #     flags: unit-tests
      #     name: connect_kit

  build_android:
    name: Build Android
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Build example app (Android)
        run: |
          cd example
          flutter pub get
          flutter build apk --debug

  build_ios:
    name: Build iOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Install CocoaPods
        run: |
          cd example/ios
          pod install --repo-update

      - name: Build example app (iOS)
        run: |
          cd example
          flutter build ios --debug --no-codesign

  publish_check:
    name: Check publish readiness
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Check if package is ready to publish
        run: flutter pub publish --dry-run
