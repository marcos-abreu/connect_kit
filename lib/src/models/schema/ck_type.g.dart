// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by: dart run tool/generate_ck_type.dart
// Generated at: 2025-10-27T10:39:22.772850

part of 'ck_type.dart';

class _$CKTypeRegistry {
  static final Map<String, CKType> _registry = {
    'activeCalories': CKType.activeCalories,
    'activityIntensity': CKType.activityIntensity,
    'basalMetabolicRate': CKType.basalMetabolicRate,
    'biologicalSex': CKType.biologicalSex,
    'bloodGlucose': CKType.bloodGlucose,
    'bloodPressure': CKType.bloodPressure,
    'bloodPressure.diastolic': CKType.bloodPressure.diastolic,
    'bloodPressure.systolic': CKType.bloodPressure.systolic,
    'bloodType': CKType.bloodType,
    'bodyFat': CKType.bodyFat,
    'bodyMassIndex': CKType.bodyMassIndex,
    'bodyTemperature': CKType.bodyTemperature,
    'bodyWaterMass': CKType.bodyWaterMass,
    'boneMass': CKType.boneMass,
    'dateOfBirth': CKType.dateOfBirth,
    'distance': CKType.distance,
    'distanceCycling': CKType.distanceCycling,
    'distanceSwimming': CKType.distanceSwimming,
    'distanceWheelchair': CKType.distanceWheelchair,
    'electrocardiogram': CKType.electrocardiogram,
    'floorsClimbed': CKType.floorsClimbed,
    'heartRate': CKType.heartRate,
    'height': CKType.height,
    'leanBodyMass': CKType.leanBodyMass,
    'menstrualFlow': CKType.menstrualFlow,
    'mindfulSession': CKType.mindfulSession,
    'nutrition': CKType.nutrition,
    'nutrition.calories': CKType.nutrition.calories,
    'nutrition.carbs': CKType.nutrition.carbs,
    'nutrition.fat': CKType.nutrition.fat,
    'nutrition.protein': CKType.nutrition.protein,
    'oxygenSaturation': CKType.oxygenSaturation,
    'respiratoryRate': CKType.respiratoryRate,
    'restingCalories': CKType.restingCalories,
    'restingHeartRate': CKType.restingHeartRate,
    'skinTemperature': CKType.skinTemperature,
    'sleepAnalysis': CKType.sleepAnalysis,
    'steps': CKType.steps,
    'totalCalories': CKType.totalCalories,
    'waterIntake': CKType.waterIntake,
    'weight': CKType.weight,
    'wheelchairPushes': CKType.wheelchairPushes,
    'workout': CKType.workout,
    'workout.calories': CKType.workout.calories,
    'workout.distance': CKType.workout.distance,
    'workout.heartRate': CKType.workout.heartRate,
  };

  static CKType fromString(String inputString) {
    if (inputString.isEmpty) {
      throw ArgumentError('Type string cannot be empty');
    }

    final type = _registry[inputString];
    if (type == null) {
      throw ArgumentError(
        'Unknown health type: "$inputString". '
        'Valid types: ${_registry.keys.join(", ")}',
      );
    }

    return type;
  }

  static CKType? fromStringOrNull(String inputString) {
    return _registry[inputString];
  }

  static bool isValid(String inputString) {
    return _registry.containsKey(inputString);
  }

  static List<CKType> get allTypes {
    return _registry.values.toList();
  }

  static List<String> get allTypeNames {
    return _registry.keys.toList();
  }
}
